name: C/C++ CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: configure
      run: ./configure
    - name: make
      run: make
    - name: make check
      run: make check
    - name: make distcheck
      run: make distcheck
    - name: make build
      run: make build
#    - name: Create Release
#      # You may pin to the exact commit or the version.
#      # uses: ncipollo/release-action@6c75be85e571768fa31b40abf38de58ba0397db5
#      uses: ncipollo/release-action@v1.13.0
#      with:
#        # An optional flag which indicates if we should update a release if it already exists. Defaults to false.
#        allowUpdates: false
#        # An optional flag which indicates if artifact read or upload errors should fail the build.
#        artifactErrorsFailBuild: false
#        # An optional set of paths representing artifacts to upload to the release. This may be a single path or a comma delimited list of paths (or globs)
#        artifacts: "ezed"
#        # The content type of the artifact. Defaults to raw
#        artifactContentType: raw
#        # An optional body for the release.
#        body: "(untested)"
#        # Optionally marks this release as a draft release. Set to true to enable.
#        draft: true
#        # Indicates if release notes should be automatically generated.
#        generateReleaseNotes: true
#        # Indicates if the release should be the "latest" release or not.
#        makeLatest: true
#        # Indicates if existing release artifacts should be replaced. Defaults to true.
#        replacesArtifacts: true
#        # When skipIfReleaseExists is enabled the action will be skipped if a non-draft release already exists for the provided tag.
#        skipIfReleaseExists: false
#        # The Github token.
#        token: ${{ github.token }}
#        # When allowUpdates is enabled, this will fail the action if the release it is updating is not a draft or a prerelease.
#        updateOnlyUnreleased: false
#        # An optional commit reference. This will be used to create the tag if it does not exist.
#        commit: ${{ github.ref }}
#        # An optional tag for the release. If this is omitted the git ref will be used (if it is a tag).
#        tag: ${{ github.ref }}
